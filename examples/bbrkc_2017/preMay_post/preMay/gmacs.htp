#if !defined(_gmacs_)
#  define _gmacs_

class model_data : public ad_comm{
  friend class gmacs_comm;
  int simflag;
  int rseed;
  init_adstring datafile;
  init_adstring controlfile;
  data_int syr;
  data_int nyr;
  data_int pyr;
  data_int nseason;
  data_int nfleet;
  data_int nsex;
  data_int nshell;
  data_int nmature;
  data_int nclass;
  data_int season_recruitment;
  data_int season_growth;
  data_int season_ssb;
  data_int season_N;
  int n_grp;
  int nproj;
  int nlikes;
  ivector isex;
  ivector ishell;
  ivector imature;
  d3_array pntr_hmo;
  data_vector size_breaks;
  dvector mid_points;
  data_int lw_type;
  int lw_dim;
  data_vector lw_alfa;
  data_vector lw_beta;
  data_matrix mean_wt_in;
  d3_array mean_wt;
  data_vector fecundity;
  data_matrix maturity;
  data_int m_prop_type;
  int m_dim;
  data_matrix m_prop_in;
  dmatrix m_prop;
  init_adstring name_read_flt;
  init_adstring name_read_srv;
  data_int nCatchDF;
  data_ivector nCatchRows;
  data_3array dCatchData;
  dmatrix obs_catch;
  d3_array dCatchData_out;
  dmatrix obs_catch_out;
  dmatrix catch_cv;
  dmatrix catch_dm;
  dmatrix catch_mult;
  ivector nFparams;
  ivector nYparams;
  ivector foff_phz;
  d3_array fhit;
  d3_array yhit;
  dmatrix dmr;
  data_int nSurveys;
  data_ivector nSurveyRows;
  data_3array dSurveyData;
  dmatrix obs_cpue;
  dmatrix cpue_cv;
  dmatrix cpue_sd;
  dmatrix cpue_cv_add;
  data_int nSizeComps_in;
  data_ivector nSizeCompRows_in;
  data_ivector nSizeCompCols_in;
  data_3array d3_SizeComps_in;
  d3_array d3_obs_size_comps_in;
  dmatrix size_comp_sample_size_in;
  dmatrix size_comp_year_in;
  data_int nGrowthObs;
  data_matrix dGrowthData;
  dvector dPreMoltSize;
  ivector iMoltIncSex;
  dvector dMoltInc;
  dvector dMoltIncCV;
  dvector mle_alpha;
  dvector mle_beta;
  data_int bUseCustomGrowthMatrix;
  data_3array CustomGrowthMatrix;
  data_int bUseCustomNaturalMortality;
  data_matrix CustomNaturalMortality;
  data_int eof;
  data_int ntheta;
  data_matrix theta_control;
  dvector theta_ival;
  dvector theta_lb;
  dvector theta_ub;
  ivector theta_phz;
  data_int nmolt;
  data_ivector iYrsMoltChanges;
  int nGrwth;
  data_matrix Grwth_control;
  dvector Grwth_ival;
  dvector Grwth_lb;
  dvector Grwth_ub;
  ivector Grwth_phz;
  int nslx;
  int nslx_pars;
  int nslx_rows_in;
  int nslx_cols_in;
  data_ivector slx_nsel_period_in;
  data_ivector slx_bsex_in;
  data_imatrix slx_type_in;
  data_ivector ret_nret_period_in;
  data_ivector ret_bsex_in;
  data_imatrix ret_type_in;
  data_imatrix slx_nret;
  data_matrix slx_control_in;
  imatrix slx_control;
  ivector slx_indx;
  ivector slx_gear;
  ivector slx_type;
  ivector slx_isex;
  ivector slx_styr;
  ivector slx_edyr;
  ivector slx_cols;
  ivector slx_npar;
  dmatrix slx_par;
  d3_array slx_priors;
  dvector slx_lb;
  dvector slx_ub;
  ivector slx_phzm;
  data_matrix q_controls;
  dvector q_ival;
  dvector q_lb;
  dvector q_ub;
  ivector q_phz;
  ivector prior_qtype;
  dvector prior_p1;
  dvector prior_p2;
  ivector q_anal;
  dvector cpue_lambda;
  data_matrix cv_controls;
  dvector add_cv_ival;
  dvector add_cv_lb;
  dvector add_cv_ub;
  ivector prior_add_cv_type;
  dvector prior_add_cv_p1;
  dvector prior_add_cv_p2;
  ivector cv_phz;
  dvector log_add_cv_ival;
  dvector log_add_cv_lb;
  dvector log_add_cv_ub;
  data_matrix f_controls;
  ivector f_phz;
  dvector pen_fbar;
  dvector log_pen_fbar;
  dmatrix pen_fstd;
  data_ivector nAgeCompType_in;
  data_ivector bTailCompression_in;
  data_vector nvn_ival_in;
  data_ivector nvn_phz_in;
  data_ivector iCompAggregator;
  data_vector lf_lambda_in;
  int nSizeComps;
  ivector nSizeCompRows;
  ivector nSizeCompCols;
  ivector nAgeCompType;
  ivector bTailCompression;
  dvector log_nvn_ival;
  ivector nvn_phz;
  dvector lf_lambda;
  d3_array d3_SizeComps;
  d3_array d3_obs_size_comps;
  dmatrix size_comp_sample_size;
  dmatrix size_comp_year;
  ivector ilike_vector;
  int nMdev;
  int nMdev_females;
  data_int m_females;
  data_int m_type;
  data_int Mdev_phz;
  int Mdev_phz_females;
  data_number m_stdev;
  data_int m_nNodes;
  data_int m_nNodes_females;
  data_ivector m_nodeyear;
  data_ivector m_nodeyear_females;
  data_vector model_controls;
  int rdv_phz;
  int rec_ini_phz;
  int verbose;
  int bInitializeUnfished;
  int spr_syr;
  int spr_nyr;
  double spr_target;
  int spr_fleet;
  double spr_lambda;
  int bUseEmpiricalGrowth;
  int nSRR_flag;
  int rec_prop_phz;
  data_int eof_ctl;
  int nf;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number_vector theta;
  param_init_bounded_number_vector Grwth;
  param_init_bounded_number_vector log_slx_pars;
  param_init_number_vector log_fbar;
  param_init_vector_vector log_fdev;
  param_init_number_vector log_foff;
  param_init_vector_vector log_fdov;
  param_init_bounded_dev_vector rec_ini;
  param_init_bounded_dev_vector rec_dev;
  param_init_bounded_dev_vector logit_rec_prop;
  param_init_bounded_dev_vector m_dev;
  param_init_bounded_dev_vector m_dev_females;
  param_init_number_vector log_vn;
  param_init_bounded_number_vector survey_q;
  param_init_bounded_number_vector log_add_cv;
  param_vector priorDensity;
  param_matrix nloglike;
  param_vector nlogPenalty;
  param_matrix sdnr_MAR_cpue;
  param_matrix sdnr_MAR_lf;
  param_vector Francis_weights;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value objfun;
  param_number fpen;
  param_number M0;
  param_number logR0;
  param_number logRbar;
  param_number logRini;
  param_number ra;
  param_number rbeta;
  param_number logSigmaR;
  param_number steepness;
  param_number rho;
  param_vector logN0;
  param_vector alpha;
  param_vector beta;
  param_vector gscale;
  param_matrix molt_mu;
  param_matrix molt_cv;
  param_vector rec_sdd;
  param_matrix recruits;
  param_vector res_recruit;
  param_vector xi;
  param_matrix pre_catch;
  param_matrix res_catch;
  param_matrix pre_catch_out;
  param_matrix res_catch_out;
  param_vector log_q_catch;
  param_matrix pre_cpue;
  param_matrix res_cpue;
  param_matrix molt_increment;
  param_3array molt_probability;
  param_3array P;
  param_3array growth_transition;
  param_3array size_transition;
  param_3array M;
  param_4array F;
  param_4array Z;
  param_5array S;
  param_4array d4_N;
  param_4array ft;
  param_3array d3_newShell;
  param_3array d3_oldShell;
  param_3array d3_pre_size_comps_in;
  param_3array d3_res_size_comps_in;
  param_3array d3_obs_size_comps_out;
  param_3array d3_pre_size_comps_out;
  param_3array d3_res_size_comps_out;
  param_3array d3_pre_size_comps;
  param_3array d3_res_size_comps;
  param_4array log_slx_capture;
  param_4array log_slx_retaind;
  param_4array log_slx_discard;
  param_number spr_rbar;
  param_number spr_fspr;
  param_number spr_bspr;
  param_number spr_cofl;
  param_number spr_fofl;
  param_number spr_ssbo;
  param_stddev_number sd_rbar;
  param_stddev_number sd_fofl;
  param_stddev_number sd_ofl;
  param_stddev_vector sd_fbar;
  param_stddev_matrix sd_log_recruits;
  param_stddev_vector sd_log_ssb;
  param_stddev_vector sd_log_dyn_Bzero;
  friend class population_model;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void write_eval(void);
  void calc_sdreport(void);
  void initialize_model_parameters(void);
  void calc_selectivities(void);
  void calc_fishing_mortality(void);
 dvar_vector calc_growth_increments(const dvector vSizes, const ivector iSex);
  void calc_growth_increments(void);
  void calc_growth_transition(void);
  void calc_natural_mortality(void);
  void calc_total_mortality(void);
  void reset_Z_to_M(void);
  void calc_molting_probability(void);
  void calc_recruitment_size_distribution(void);
  void calc_initial_numbers_at_length(void);
  void update_population_numbers_at_length(void);
  void calc_stock_recruitment_relationship(void);
  void calc_predicted_catch(void);
  void calc_predicted_catch_out(void);
  void calc_relative_abundance(void);
  void calc_predicted_composition(void);
 void get_all_sdnr_MAR();
 dvector calc_sdnr_MAR(dvector tmpVec);
 dvector calc_sdnr_MAR(dmatrix tmpMat);
 dvector calc_Francis_weights();
 dvariable get_prior_pdf(const int &pType, const dvariable &_theta, const double &p1, const double &p2);
  void calc_prior_densities(void);
  void calc_objective_function(void);
  void simulation_model(void);
 dvar_vector calc_ssb();
 void calc_spr_reference_points_old(const int iyr, const int iseason, const int ifleet);
 dvar_matrix calc_brute_equilibrium();
 dvector calc_brute_equilibrium2(const dmatrix& SS, const double& rbar, const int& sex, const int& seas);
 void calc_spr_reference_oldagain();
 dvar_vector project_biomass(const int iproj, const int ifleet, const dvariable log_F, dvar4_array numbers_proj_gytl);
 void calc_spr_reference_points2(const int iyr, const int ifleet);
 double Eff_N(const dvector& pobs, const dvar_vector& phat);
 double mn_length(const dvector& pobs);
 double mn_length(const dvar_vector& pobs);
 double Sd_length(const dvector& pobs);
 double Eff_N_adj(const double, const dvar_vector& pobs, const dvar_vector& phat);
 double Eff_N2(const dvector& pobs, const dvar_vector& phat);

};
#endif
